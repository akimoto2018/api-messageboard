paths:
  /messageboards:
    post:
      tags:
        - messageboard
      summary: Create a new instance of the model and persist it into the data source.
      operationId: messageboard.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/messageboard'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/messageboard'
      deprecated: false
    patch:
      tags:
        - messageboard
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: messageboard.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/messageboard'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/messageboard'
      deprecated: false
    put:
      tags:
        - messageboard
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: messageboard.replaceOrCreate__put_messageboards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/messageboard'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/messageboard'
      deprecated: false
    get:
      tags:
        - messageboard
      summary: Find all instances of the model matched by filter from the data source.
      operationId: messageboard.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/messageboard'
      deprecated: false
  /messageboards/replaceOrCreate:
    post:
      tags:
        - messageboard
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: messageboard.replaceOrCreate__post_messageboards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/messageboard'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/messageboard'
      deprecated: false
  '/messageboards/{id}':
    get:
      tags:
        - messageboard
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: messageboard.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/messageboard'
      deprecated: false
    delete:
      tags:
        - messageboard
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: messageboard.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /messageboards/count:
    get:
      tags:
        - messageboard
      summary: Count instances of the model matched by where from the data source.
      operationId: messageboard.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  messageboard:
    properties:
      _id:
        type: string
      content:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
      - _id
      - content
      - title
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: api-messageboard
  version: 1.0.0
  title: api-messageboard
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
